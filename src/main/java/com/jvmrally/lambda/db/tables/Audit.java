/*
 * This file is generated by jOOQ.
 */
package com.jvmrally.lambda.db.tables;


import com.jvmrally.lambda.db.DefaultSchema;
import com.jvmrally.lambda.db.Keys;
import com.jvmrally.lambda.db.enums.AuditAction;
import com.jvmrally.lambda.db.tables.records.AuditRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Audit extends TableImpl<AuditRecord> {

    private static final long serialVersionUID = 691824491;

    /**
     * The reference instance of <code>audit</code>
     */
    public static final Audit AUDIT = new Audit();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuditRecord> getRecordType() {
        return AuditRecord.class;
    }

    /**
     * The column <code>audit.id</code>.
     */
    public final TableField<AuditRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('audit_serial'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>audit.user_id</code>.
     */
    public final TableField<AuditRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>audit.mod_action</code>.
     */
    public final TableField<AuditRecord, AuditAction> MOD_ACTION = createField(DSL.name("mod_action"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.jvmrally.lambda.db.enums.AuditAction.class), this, "");

    /**
     * The column <code>audit.target_user</code>.
     */
    public final TableField<AuditRecord, Long> TARGET_USER = createField(DSL.name("target_user"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>audit.reason</code>.
     */
    public final TableField<AuditRecord, String> REASON = createField(DSL.name("reason"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>audit.created</code>.
     */
    public final TableField<AuditRecord, OffsetDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * Create a <code>audit</code> table reference
     */
    public Audit() {
        this(DSL.name("audit"), null);
    }

    /**
     * Create an aliased <code>audit</code> table reference
     */
    public Audit(String alias) {
        this(DSL.name(alias), AUDIT);
    }

    /**
     * Create an aliased <code>audit</code> table reference
     */
    public Audit(Name alias) {
        this(alias, AUDIT);
    }

    private Audit(Name alias, Table<AuditRecord> aliased) {
        this(alias, aliased, null);
    }

    private Audit(Name alias, Table<AuditRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Audit(Table<O> child, ForeignKey<O, AuditRecord> key) {
        super(child, key, AUDIT);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<AuditRecord, Integer> getIdentity() {
        return Keys.IDENTITY_AUDIT;
    }

    @Override
    public UniqueKey<AuditRecord> getPrimaryKey() {
        return Keys.AUDIT_PKEY;
    }

    @Override
    public List<UniqueKey<AuditRecord>> getKeys() {
        return Arrays.<UniqueKey<AuditRecord>>asList(Keys.AUDIT_PKEY);
    }

    @Override
    public Audit as(String alias) {
        return new Audit(DSL.name(alias), this);
    }

    @Override
    public Audit as(Name alias) {
        return new Audit(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Audit rename(String name) {
        return new Audit(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Audit rename(Name name) {
        return new Audit(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Long, AuditAction, Long, String, OffsetDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
