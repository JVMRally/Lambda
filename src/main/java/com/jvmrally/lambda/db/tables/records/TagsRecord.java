/*
 * This file is generated by jOOQ.
 */
package com.jvmrally.lambda.db.tables.records;


import com.jvmrally.lambda.db.tables.Tags;

import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TagsRecord extends UpdatableRecordImpl<TagsRecord> implements Record4<Integer, String, String, OffsetDateTime> {

    private static final long serialVersionUID = -980977360;

    /**
     * Setter for <code>tags.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>tags.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>tags.tagname</code>.
     */
    public void setTagname(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>tags.tagname</code>.
     */
    public String getTagname() {
        return (String) get(1);
    }

    /**
     * Setter for <code>tags.content</code>.
     */
    public void setContent(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>tags.content</code>.
     */
    public String getContent() {
        return (String) get(2);
    }

    /**
     * Setter for <code>tags.updated_at</code>.
     */
    public void setUpdatedAt(OffsetDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>tags.updated_at</code>.
     */
    public OffsetDateTime getUpdatedAt() {
        return (OffsetDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, String, OffsetDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Tags.TAGS.ID;
    }

    @Override
    public Field<String> field2() {
        return Tags.TAGS.TAGNAME;
    }

    @Override
    public Field<String> field3() {
        return Tags.TAGS.CONTENT;
    }

    @Override
    public Field<OffsetDateTime> field4() {
        return Tags.TAGS.UPDATED_AT;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getTagname();
    }

    @Override
    public String component3() {
        return getContent();
    }

    @Override
    public OffsetDateTime component4() {
        return getUpdatedAt();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getTagname();
    }

    @Override
    public String value3() {
        return getContent();
    }

    @Override
    public OffsetDateTime value4() {
        return getUpdatedAt();
    }

    @Override
    public TagsRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public TagsRecord value2(String value) {
        setTagname(value);
        return this;
    }

    @Override
    public TagsRecord value3(String value) {
        setContent(value);
        return this;
    }

    @Override
    public TagsRecord value4(OffsetDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public TagsRecord values(Integer value1, String value2, String value3, OffsetDateTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TagsRecord
     */
    public TagsRecord() {
        super(Tags.TAGS);
    }

    /**
     * Create a detached, initialised TagsRecord
     */
    public TagsRecord(Integer id, String tagname, String content, OffsetDateTime updatedAt) {
        super(Tags.TAGS);

        set(0, id);
        set(1, tagname);
        set(2, content);
        set(3, updatedAt);
    }
}
