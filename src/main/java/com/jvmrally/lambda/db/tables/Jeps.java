/*
 * This file is generated by jOOQ.
 */
package com.jvmrally.lambda.db.tables;


import com.jvmrally.lambda.db.DefaultSchema;
import com.jvmrally.lambda.db.Keys;
import com.jvmrally.lambda.db.tables.records.JepsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Jeps extends TableImpl<JepsRecord> {

    private static final long serialVersionUID = -229239739;

    /**
     * The reference instance of <code>jeps</code>
     */
    public static final Jeps JEPS = new Jeps();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JepsRecord> getRecordType() {
        return JepsRecord.class;
    }

    /**
     * The column <code>jeps.id</code>.
     */
    public final TableField<JepsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jeps.title</code>.
     */
    public final TableField<JepsRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>jeps.jep_type</code>.
     */
    public final TableField<JepsRecord, String> JEP_TYPE = createField(DSL.name("jep_type"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>jeps.jep_status</code>.
     */
    public final TableField<JepsRecord, String> JEP_STATUS = createField(DSL.name("jep_status"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>jeps.release</code>.
     */
    public final TableField<JepsRecord, String> RELEASE = createField(DSL.name("release"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>jeps.component</code>.
     */
    public final TableField<JepsRecord, String> COMPONENT = createField(DSL.name("component"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>jeps.jep_url</code>.
     */
    public final TableField<JepsRecord, String> JEP_URL = createField(DSL.name("jep_url"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>jeps</code> table reference
     */
    public Jeps() {
        this(DSL.name("jeps"), null);
    }

    /**
     * Create an aliased <code>jeps</code> table reference
     */
    public Jeps(String alias) {
        this(DSL.name(alias), JEPS);
    }

    /**
     * Create an aliased <code>jeps</code> table reference
     */
    public Jeps(Name alias) {
        this(alias, JEPS);
    }

    private Jeps(Name alias, Table<JepsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Jeps(Name alias, Table<JepsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Jeps(Table<O> child, ForeignKey<O, JepsRecord> key) {
        super(child, key, JEPS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<JepsRecord> getPrimaryKey() {
        return Keys.JEPS_PKEY;
    }

    @Override
    public List<UniqueKey<JepsRecord>> getKeys() {
        return Arrays.<UniqueKey<JepsRecord>>asList(Keys.JEPS_PKEY);
    }

    @Override
    public Jeps as(String alias) {
        return new Jeps(DSL.name(alias), this);
    }

    @Override
    public Jeps as(Name alias) {
        return new Jeps(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Jeps rename(String name) {
        return new Jeps(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Jeps rename(Name name) {
        return new Jeps(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
